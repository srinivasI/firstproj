{"version":3,"sources":["actions/ProductActions.js","ProductList.js","actions/types.js","reducers/productReducer.js","reducers/index.js","reducers/PostReducer.js","index.js"],"names":["fetchProducts","dispatch","fetchProductsBegin","Promise","resolve","setTimeout","products","id","name","then","json1","fetchProductsSuccess","catch","error","fetchProductsFailure","FETCH_PRODUCTS_BEGIN","FETCH_PRODUCTS_SUCCESS","FETCH_PRODUCTS_FAILURE","type","payload","ProductList","this","props","loading","message","map","product","React","Component","connect","state","items","ADD_POST","DELETE_POST","initialState","combineReducers","posts","action","filter","post","store","createStore","applyMiddleware","thunk","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"iMAwCS,SAASA,IACd,OAAO,SAAAC,GAEL,OADAA,EAASC,KAnCJ,IAAIC,SAAQ,SAAAC,GAEjBC,YACE,kBACED,EAAQ,CACNE,SAAU,CACR,CACEC,GAAI,EACJC,KAAM,SAER,CACED,GAAI,EACJC,KAAM,WAER,CACED,GAAI,EACJC,KAAM,gBAER,CACED,GAAI,EACJC,KAAM,SAER,CACED,GAAI,EACJC,KAAM,sBAId,QASCC,MAAK,SAAAC,GAEJ,OADAT,EAASU,EAAqBD,EAAMJ,WAC7BI,EAAMJ,YAEdM,OAAM,SAAAC,GAAK,OACVZ,EAASa,EAAqBD,QAa/B,IAAME,EAAuB,uBACvBC,EACX,yBACWC,EACX,yBAEWf,EAAqB,iBAAO,CACvCgB,KAAMH,IAGKJ,EAAuB,SAAAL,GAAQ,MAAK,CAC/CY,KAAMF,EACNG,QAAS,CAAEb,cAGAQ,EAAuB,SAAAD,GAAK,MAAK,CAC5CK,KAAMD,EACNE,QAAS,CAAEN,WC5ETO,E,kLAEFC,KAAKC,MAAMrB,SAASD,O,+BAGZ,IAAD,EAC8BqB,KAAKC,MAAlCT,EADD,EACCA,MAAOU,EADR,EACQA,QAASjB,EADjB,EACiBA,SAExB,OAAIO,EACK,0CAAaA,EAAMW,WAGxBD,EACK,6CAIP,6BACGjB,EAASmB,KAAI,SAAAC,GAAO,OACnB,+BAAsBA,EAAQnB,GAA9B,OAAsCmB,EAAQlB,OAArCkB,EAAQnB,a,GAnBDoB,IAAMC,WAgCjBC,eANS,SAAAC,GAAK,MAAK,CAChCxB,SAAUwB,EAAMxB,SAASyB,MACzBR,QAASO,EAAMxB,SAASiB,QACxBV,MAAOiB,EAAMxB,SAASO,SAGTgB,CAAyBT,G,uBCnC3BY,EAAW,WACXC,EAAc,c,WCKnBC,EAAe,CACnBH,MAAO,GACPR,SAAS,EACTV,MAAO,MCLIsB,kBAAgB,CAC3BC,MCHW,WAA0C,IAArBN,EAAoB,uDAAZ,GAAIO,EAAQ,uCACtD,OAAQA,EAAOnB,MACb,KAAKc,EACH,MAAM,GAAN,mBAAWF,GAAX,CAAkBO,EAAOlB,UAC3B,KAAKc,EACH,OAAOH,EAAMQ,QAAO,SAAAC,GAAI,OAAIA,EAAKhC,KAAO8B,EAAOlB,QAAQZ,MACzD,QACE,OAAOuB,IDHTxB,SDMa,WAGZ,IAFDwB,EAEA,uDAFQI,EACRG,EACA,uCACA,OAAQA,EAAOnB,MACb,KAAKH,EAGH,OAAO,2BACFe,GADL,IAEEP,SAAS,EACTV,MAAO,OAGX,KAAKG,EAGH,OAAO,2BACFc,GADL,IAEEP,SAAS,EACTQ,MAAOM,EAAOlB,QAAQb,WAG1B,KAAKW,EAMH,OAAO,2BACFa,GADL,IAEEP,SAAS,EACTV,MAAOwB,EAAOlB,QAAQN,MACtBkB,MAAO,KAGX,QAEE,OAAOD,MG1CTU,EAAQC,YACZN,EACAO,YAAgBC,MAGlB,SAASC,IACP,OAEI,cAAC,EAAD,IAKN,IAAMC,EAAcC,SAASC,eAAe,SAC5CC,IAASC,OACP,cAAC,IAAD,CAAUT,MAAOA,EAAjB,SACE,cAACI,EAAD,MAEFC,K","file":"static/js/main.de6b9efa.chunk.js","sourcesContent":["function getProducts() {\r\n    return fetch(\"/products\")\r\n      .then(handleErrors)\r\n      .then(res => res.json());\r\n  }\r\n  \r\n  function fakeGetProducts() {\r\n    return new Promise(resolve => {\r\n      // Resolve after a timeout so we can see the loading indicator\r\n      setTimeout(\r\n        () =>\r\n          resolve({\r\n            products: [\r\n              {\r\n                id: 0,\r\n                name: \"Apple\"\r\n              },\r\n              {\r\n                id: 1,\r\n                name: \"Bananas\"\r\n              },\r\n              {\r\n                id: 2,\r\n                name: \"Strawberries\"\r\n              },\r\n              {\r\n                id: 3,\r\n                name: \"Apple\"\r\n              },\r\n              {\r\n                id: 4,\r\n                name: \"Grapes/banana\"\r\n              }\r\n            ]\r\n          }),\r\n        1000\r\n      );\r\n    });\r\n  }\r\n  \r\n  export function fetchProducts() {\r\n    return dispatch => {\r\n      dispatch(fetchProductsBegin());\r\n      return fakeGetProducts()\r\n        .then(json1 => {\r\n          dispatch(fetchProductsSuccess(json1.products));\r\n          return json1.products;\r\n        })\r\n        .catch(error =>\r\n          dispatch(fetchProductsFailure(error))\r\n        );\r\n    };\r\n  }\r\n  \r\n  // Handle HTTP errors since fetch won't.\r\n  function handleErrors(response) {\r\n    if (!response.ok) {\r\n      throw Error(response.statusText);\r\n    }\r\n    return response;\r\n  }\r\n  \r\n  export const FETCH_PRODUCTS_BEGIN = \"FETCH_PRODUCTS_BEGIN\";\r\n  export const FETCH_PRODUCTS_SUCCESS =\r\n    \"FETCH_PRODUCTS_SUCCESS\";\r\n  export const FETCH_PRODUCTS_FAILURE =\r\n    \"FETCH_PRODUCTS_FAILURE\";\r\n  \r\n  export const fetchProductsBegin = () => ({\r\n    type: FETCH_PRODUCTS_BEGIN\r\n  });\r\n  \r\n  export const fetchProductsSuccess = products => ({\r\n    type: FETCH_PRODUCTS_SUCCESS,\r\n    payload: { products }\r\n  });\r\n  \r\n  export const fetchProductsFailure = error => ({\r\n    type: FETCH_PRODUCTS_FAILURE,\r\n    payload: { error }\r\n  });","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchProducts } from \"./actions/ProductActions\";\r\nclass ProductList extends React.Component {\r\n  componentDidMount() {\r\n    this.props.dispatch(fetchProducts());\r\n  }\r\n\r\n  render() {\r\n    const { error, loading, products } = this.props;\r\n\r\n    if (error) {\r\n      return <div>Error! {error.message}</div>;\r\n    }\r\n\r\n    if (loading) {\r\n      return <div>Loading...</div>;\r\n    }\r\n\r\n    return (\r\n      <ol>\r\n        {products.map(product => (\r\n          <li key={product.id}>{product.id}===={product.name}</li>\r\n        ))}\r\n      </ol>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  products: state.products.items,\r\n  loading: state.products.loading,\r\n  error: state.products.error\r\n});\r\n\r\nexport default connect(mapStateToProps)(ProductList);","export const ADD_POST = 'ADD_POST';\r\nexport const DELETE_POST = 'DELETE_POST';","import {\r\n    FETCH_PRODUCTS_BEGIN,\r\n    FETCH_PRODUCTS_SUCCESS,\r\n    FETCH_PRODUCTS_FAILURE\r\n  } from \"../actions/ProductActions\";\r\n  \r\n  const initialState = {\r\n    items: [],\r\n    loading: false,\r\n    error: null\r\n  };\r\n  \r\n  export default function productReducer(\r\n    state = initialState,\r\n    action\r\n  ) {\r\n    switch (action.type) {\r\n      case FETCH_PRODUCTS_BEGIN:\r\n        // Mark the state as \"loading\" so we can show a spinner or something\r\n        // Also, reset any errors. We're starting fresh.\r\n        return {\r\n          ...state,\r\n          loading: true,\r\n          error: null\r\n        };\r\n  \r\n      case FETCH_PRODUCTS_SUCCESS:\r\n        // All done: set loading \"false\".\r\n        // Also, replace the items with the ones from the server\r\n        return {\r\n          ...state,\r\n          loading: false,\r\n          items: action.payload.products\r\n        };\r\n  \r\n      case FETCH_PRODUCTS_FAILURE:\r\n        // The request failed, but it did stop, so set loading to \"false\".\r\n        // Save the error, and we can display it somewhere\r\n        // Since it failed, we don't have items to display anymore, so set it empty.\r\n        // This is up to you and your app though: maybe you want to keep the items\r\n        // around! Do whatever seems right.\r\n        return {\r\n          ...state,\r\n          loading: false,\r\n          error: action.payload.error,\r\n          items: []\r\n        };\r\n  \r\n      default:\r\n        // ALWAYS have a default case in a reducer\r\n        return state;\r\n    }\r\n  }","import { combineReducers } from 'redux';\r\nimport posts from './PostReducer';\r\nimport products from './productReducer';\r\n\r\nexport default combineReducers({\r\n    posts: posts,\r\n    products:products\r\n});","import { ADD_POST, DELETE_POST } from '../actions/types';\r\n\r\nexport default function postReducer(state = [], action) {\r\n  switch (action.type) {\r\n    case ADD_POST:\r\n      return [...state, action.payload];\r\n    case DELETE_POST:\r\n      return state.filter(post => post.id !== action.payload.id);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ProductList from \"./ProductList\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport combineReducers from \"./reducers\";\n\nconst store = createStore(\n  combineReducers,\n  applyMiddleware(thunk)\n);\n\nfunction App() {\n  return (\n    \n      <ProductList />\n    \n  );\n}\n\nconst rootElement = document.getElementById(\"srini\");\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);"],"sourceRoot":""}